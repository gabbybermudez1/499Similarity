import os
from winnowing import WinnowedDoc
from config import *
import time

def jaccard_coefficient(doc1_fp, doc2_fp):
    '''
    Helper function that computes how similar 2 arrays of fingerprints are. 

    Parameters
    ----------
    doc1_fp : list of str
        list of fingerprints for 1 document
    doc2_fp : list of str
        list of fingerprints for the second document

    Returns
    -------
    similarity : float
        Similarity measure of the 2 documents
    '''
    intersection = [fingerprint for fingerprint in doc1_fp if fingerprint in doc2_fp]
    intersection = len(intersection)
    denominator = min(len(doc1_fp) , len(doc2_fp) )
    similarity = (intersection / denominator) * 100
    similarity = round(similarity, 2)
    return similarity


def return_file_location(filename, directory):
    '''
    return_file_location is a helper function that finds the exact path that a file resides in given a directory or subdirectory


    Parameters
    ----------
    filename : str
        String representation of a file name that we want to find

    directory : str
        a directory where we will search recursively for the file
    
    Returns
    -------
    path: str
        path leading to a given file
    
    '''
    for current_dir, dir_names, file_names in os.walk(directory):
        if filename in file_names:
            path = os.path.join(current_dir, filename).replace("\\", "/")
            return path

def generate_fingerprints_all():
    '''
    For all of the assignment names listed in config.py, this function will generate a set of fingerprints for each student's
    submission of that file. For instance, if we are checking "about.html" and "index.html" for assignment 2, this function
    returns each student's submission for "about.html" and "index.html if it exists. 

    Returns
    -------
    all_submissions : dict of dict
        First level entries of all_submissions is a dictionary of all of the student's submissions. Second level entries
        are the fingerprints for specific assignments. 
        
        For instance, to access student1's "index.html" fingerprints,this can be done by:
        all_submissions["student1"]["index.html"]. Similarly, to access that same student's "about.html" fingerprints, it
        is accessed by all_submissions["student1"]["about.html"]
    '''
    all_submissions = {}
    #iterate over all students
    for net_id in students:
        all_submissions[net_id] = {}
        student_dir = os.path.join(ROOT, net_id, assignment_name).replace("\\", '/')
        # iterate over the assignments for the student
        for assignment_file in assignment_files:
            # find where the assignment is 
            path = return_file_location(assignment_file, student_dir)
            if path is not None:
                with open(path) as document:
                    contents = document.read()
                all_submissions[net_id][assignment_file] = WinnowedDoc(contents, k_gram_size, window_size, use_rolling).fingerprints
    return all_submissions


def compare_all_fingerprints(all_submissions, threshold):
    '''
    Given a list of fingerprints (generated by generate_fingerprints_all), compare all submissions and see which ones are
    are similar. The results are recorded in a separate "similarity_report.txt" file

    Parameters
    ----------
    all_submissions : dict of dict
        Dictionaries containing students and the fingerprints for their submissions. For more information, refer to the return
        for generate_fingerprints_all()
    
    threshold : int 
         Threshold represents the threshold for how similar we will tolerate assignments to be. If two sets of fingerprints
         exhibit a similarity higher than this threshold (when applying the Jaccard coefficient on them), then they will
         be recorded as similar
    '''
    threshold = float(threshold) # explicit type casting to be a float
    with open("similarity_report.txt", "w") as similarity_report:
        for file in assignment_files:
            similarity_report.write("\n-----------------------\n")
            similarity_report.write(file + "\n")
            similarity_report.write("-----------------------\n")
            for i in range(len(students)):
                for j in range(i + 1, len(students)):
                    if (all_submissions[students[i]].get(file) is not None) and (all_submissions[students[j]].get(file) is not None ):
                        similarity = jaccard_coefficient(all_submissions[students[i]].get(file), all_submissions[students[j]].get(file))
                        if threshold < similarity:
                            similarity_report.write("Student " + students[i] + " and  Student " + students[j] + " have a similarity score of " + str(similarity) + "\n")



# ------ Configurations --------

# System Configurations
ROOT = system_cfg["root"]
assignment_name = system_cfg["assignment_name"]
assignment_files = system_cfg["assignment_files"]
threshold = system_cfg["similarity_threshold"]

# Algorithmic Parameters
k_gram_size = algorithm_cfg["k_gram_size"]
window_size = algorithm_cfg["window_size"]
use_rolling = algorithm_cfg["use_rolling_hash"]

students = os.listdir(ROOT)

def main():
    start_time = time.time()
    print("--- Generating Fingerprints ---")
    all_submissions = generate_fingerprints_all()
    print("--- Generated Fingerprints ---")
    print("--- Comparing Student Submissions ---")
    compare_all_fingerprints(all_submissions, threshold)
    print("--- Similarity Report Generated ---")
    elapsed_time = time.time() - start_time
    print("--- Algorithm took ", elapsed_time , "s to run ---")
main()
    











